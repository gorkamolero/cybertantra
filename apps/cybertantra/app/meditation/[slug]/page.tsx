import { getMeditationBySlug } from "@cybertantra/database";
import { notFound } from "next/navigation";
import { Metadata } from "next";

export const dynamicParams = true;
export const revalidate = 86400; // Cache for 24 hours

interface PageProps {
  params: { slug: string };
}

export async function generateMetadata({ params }: PageProps): Promise<Metadata> {
  const meditation = await getMeditationBySlug(params.slug);
  
  if (!meditation) {
    return {
      title: "Meditation Not Found"
    };
  }

  return {
    title: `${meditation.topic} - ${meditation.duration} min meditation | Cybertantra`,
    description: `A ${meditation.duration}-minute guided meditation on ${meditation.topic}. Generated with AI and mixed with ambient music.`,
    openGraph: {
      title: `${meditation.topic} - ${meditation.duration} min meditation`,
      description: `A ${meditation.duration}-minute guided meditation on ${meditation.topic}`,
      type: "website",
      audio: meditation.audioPath,
    },
    twitter: {
      card: "summary",
      title: `${meditation.topic} - ${meditation.duration} min meditation`,
      description: `A ${meditation.duration}-minute guided meditation on ${meditation.topic}`,
    }
  };
}

export default async function MeditationPage({ params }: PageProps) {
  const meditation = await getMeditationBySlug(params.slug);

  if (!meditation) {
    notFound();
  }

  const audioSizeMB = meditation.audioSize ? (meditation.audioSize / (1024 * 1024)).toFixed(1) : 'Unknown';

  return (
    <div className="min-h-screen bg-black text-green-400 font-mono p-8">
      <div className="max-w-2xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold mb-2 text-green-300">
            {meditation.topic}
          </h1>
          <p className="text-green-600">
            {meditation.duration} minute guided meditation
          </p>
          <p className="text-xs text-green-700 mt-2">
            Generated on {new Date(meditation.createdAt).toLocaleDateString()}
          </p>
        </div>

        {/* Audio Player */}
        <div className="bg-gray-900 border border-green-600 rounded-lg p-6 mb-6">
          <audio 
            controls 
            className="w-full mb-4"
            preload="metadata"
          >
            <source src={meditation.audioPath} type="audio/mpeg" />
            Your browser does not support the audio element.
          </audio>
          
          <div className="text-sm text-green-600 space-y-1">
            <div>File size: {audioSizeMB} MB</div>
            <div>Format: MP3</div>
          </div>
        </div>

        {/* Share Section */}
        <div className="bg-gray-900 border border-green-600 rounded-lg p-6 mb-6">
          <h3 className="text-lg font-semibold mb-3 text-green-300">Share This Meditation</h3>
          <div className="flex flex-col gap-3">
            <input
              type="text"
              value={typeof window !== 'undefined' ? window.location.href : ''}
              readOnly
              className="bg-black border border-green-700 rounded px-3 py-2 text-sm text-green-400 font-mono"
              onClick={(e) => e.currentTarget.select()}
            />
            <button
              onClick={() => {
                if (typeof window !== 'undefined') {
                  navigator.clipboard.writeText(window.location.href);
                }
              }}
              className="bg-green-700 hover:bg-green-600 text-black px-4 py-2 rounded font-semibold transition-colors"
            >
              Copy Link
            </button>
          </div>
        </div>

        {/* Info */}
        <div className="text-center text-green-700 text-sm">
          <p>Generated by Cybertantra AI</p>
          <p className="mt-2">
            <a href="/" className="text-green-500 hover:text-green-400 underline">
              ‚Üê Back to Terminal
            </a>
          </p>
        </div>
      </div>
    </div>
  );
}